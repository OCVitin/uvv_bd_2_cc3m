/* Aqui temos a criação da tabela "alunos", logo em seguida a sequence para gerar o código,   */
/* mais abaixo teremos o trigger para ativar a sequência sempre que o usuário fizer um insert */

create table alunos (
    cod        NUMBER(3) constraint alunos_cod_nn not null,
    nome       VARCHAR2(50) constraint alunos_nome_nn not null,
    finalizado VARCHAR2(1) default 'N' constraint alunos_finalizado_nn not null
);
    
alter table alunos
add constraint pk_alunos primary key (cod);

alter table alunos
add constraint alunos_finalizado_ck
check (finalizado in ('S', 'N'));
    
create sequence seq_alunos
    start with 1
    increment by 1
    maxvalue 999
    minvalue 1
    ;
    
INSERT INTO alunos(nome) VALUES (
    'OCVitin'
    );
    
select * from alunos;

/* Abaixo temos o trigger "alunos_cod_seq" */

CREATE OR REPLACE TRIGGER ALUNOS_COD_SEQ 
BEFORE INSERT ON alunos
FOR EACH ROW
BEGIN
    :new.cod := seq_alunos.NEXTVAL;
END;

/* Abaixo temos uma tabela com as informações dos possíveis usuários do nosso banco de dados: grupo de RH e o administrador.    */

create table usuario (
    username VARCHAR2(10) constraint usuario_username_nn not null,
    permissao VARCHAR2(1) constraint usuario_permissao_nn not null
    );
    
alter table usuario
add constraint pk_usuario primary key (username);

alter table usuario
add constraint usuario_permissao_ck
check (permissao in ('C', 'A'));

insert into usuario values (
    'ADMIN',
    'A'
    );
    
insert into usuario values (
    'HR',
    'C'
    );
    
select * from usuario;

/* Trigger para questão 4, sobre proibir o usuário comum de alterar e deletar o cadastro do aluno se o campo finalizado for 'S', */
/* assim como o usuário administrador não pode apagar, mas apenas alterar os dados do aluno caso o finalizado seja 'S'.          */

CREATE OR REPLACE TRIGGER PERMISSOES 
BEFORE DELETE OR UPDATE ON alunos
FOR EACH ROW
DECLARE
    v_permissao VARCHAR2(1);
BEGIN
    SELECT permissao
    INTO v_permissao
    FROM usuario
    WHERE upper(username) = upper(user);
    IF v_permissao = 'C' AND :old.finalizado = 'S' THEN
        raise_application_error(-20000, 'Você não pode alterar os dados do usuário!');
    ELSIF v_permissao = 'A' AND :old.finalizado = 'S' AND updating THEN
        raise_application_error(-20000, 'Você não pode alterar os dados do usuário!');
    END IF;
END;

/* Essa é a resposta da questão 5, Aqui temos o código para a criação do usuário admin, que que conseguirá fazer inserts e        */
/* updates.                                                                                                                       */

CREATE USER "ADMIN" IDENTIFIED BY "123"  
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP";

GRANT SELECT, UPDATE, INSERT, DELETE ON system.aluno to ADMIN;
GRANT CREATE SESSION TO "ADMIN";
CONNECT ADMIN/123@localhost:1521/xepdb1;
